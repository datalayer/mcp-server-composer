[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-auth-example"
version = "0.1.0"
description = "Example of using Pydantic AI Agent with authenticated MCP server"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [
    { name = "Datalayer", email = "info@datalayer.io" },
]
keywords = [
    "mcp",
    "model-context-protocol",
    "pydantic-ai",
    "oauth2",
    "authentication",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "pydantic-ai[mcp]>=0.0.14",
    "httpx>=0.27.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0",
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/datalayer/mcp-server-composer"
Documentation = "https://github.com/datalayer/mcp-server-composer/tree/main/examples/mcp-auth-example"
Repository = "https://github.com/datalayer/mcp-server-composer"
Issues = "https://github.com/datalayer/mcp-server-composer/issues"

[project.scripts]
mcp-auth-example = "mcp_auth_example.__main__:main"
mcp-auth-agent = "mcp_auth_example.agent:main"
mcp-auth-client = "mcp_auth_example.client:main"
mcp-auth-server = "mcp_auth_example.server:main"

[tool.hatch.build.targets.wheel]
packages = ["mcp_auth_example"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (black handles this)
    "B008", # do not perform function calls in argument defaults
]

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
